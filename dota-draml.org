#+TITLE: Dota Draml
#+AUTHOR: acarlson
#+HTML_DOCTYPE: html5
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="style.css" />
#+OPTIONS: html-postamble:"<p class='author'>Author: %a</p><p class='date'>Last Updated: %C</p><p class='creator'>Built with %c</p><p><a href='https://github.com/acarlson99'><img src='github.png'></a></p>"
#+EXPORT_FILE_NAME: index

* idea

(setq org-export-html-postamble-format '(("en" "Date %d. Created by %d. <a href='acarlson99.github.io'>")))

I would like to be able to determine the best next pick in a dota draft.

Given a draft up to a point-- say Radiant has picked Mirana and Ogre and Dire has picked Rubick and Pudge-- what is the best next pick?

Perhaps Slark is strong because he can jump Rubick and dispell Pudge's ultimate.  Maybe there is a better pick.  Perhaps the team you are playing has won every game vs Slark?

It would also be great to discern builds and strategies during the draft phase.  Suppose you are playing into Mirana, Ogre Magi, and Slark.  Force Staff is almost mandatory, but when should I buy this?  Is it better to buy Force Staff first, or should you get more lane sustain like a Sage's Mask, or maybe a Headdress?

I should be able to answer the question "what is the best next pick and what are my lane matchups" at every stage, and (secondary) "what should my build be"

The tool should be sensitive to new data and able to refine itself to counter meta-breaking strategies.  It should take into account hero/draft winrates over the course of a tournament.

[[https://i.imgur.com/iDZpxsX.png]]

| Phase | Radiant           | Dire           |
|-------+-------------------+----------------|
| ban   | bounty hunter     | lina           |
| ban   | lich              | muerta         |
| pick  | mirana            | rubick         |
| pick  | ogre magi         | pudge          |
| ban   | faceless void     | ember spirit   |
| ban   | drow ranger       | clinkz         |
| ban   | troll warlord     | ursa           |
| pick  | slark             | weaver         |
| pick  | slardar           | spirit breaker |
| ban   | arc warden        | shadow fiend   |
| ban   | queen of pain     | necrophos      |
| pick  | outworld devourer | magnus         |

* training methods

** recommendation algorithm

Given choices X and Y and Z what is the best next choice

*** Pros

This is a mature algorithm with investment from Netflix and Amazon.  Surely there are good papers and resources on this

*** Cons

Most rec. algorithms are geared towards like-things (TV shows, products, books, music) while our algorithm should recommend a diverse set of heroes.

** vector analysis

Think of each character as a vector.  Ideally a team should be comprised of diverse heroes or vectors pointing in different directions.

- Relevant metrics/dimensions
  - stun
  - disarm
  - healing
  - dispell (hard/soft)
  - health
  - damage mitigation
  - spell immunity
  - survivability
  - farm speed
  - power curve (duration of game)
  - damage curve (duration of teamfight) https://www.youtube.com/watch?v=f0JCpxmcm68

*** Gensim

A popular Python library for creating vector space embeddings commonly used in NLP is [[https://pypi.org/project/gensim/][gensim]].  We should be able to generate vectors (size=30?) representing hero features with which to represent heroes within our model.

Likely this would involve creating a "dictionary" of [[https://en.wikipedia.org/wiki/One-hot][one-hot encoded]] dota heroes and training on many "sentences" (dota drafts)

[[*{Software Framework for Topic Modelling with Large Corpora}][gensim]]

*** CBOW

This could be done by filling in heroes and asking a model "what hero is in this position"

| Phase | R         | D      |
|-------+-----------+--------|
| ban   | bounty    | lina   |
| ban   | lich      | muerta |
| pick  | XXXX      | rubick |
| pick  | ogre magi | pudge  |

Given the draft until this point, what hero was picked first?

Perhaps weight by frequency-- how often the hero is picked-- and winrate-- how often does the game end in a win when this hero is chosen.

Something to keep in mind is pick order and role.  Usually supports pick first, but strange pick orders (like first pick Muerta carry bc it's strong and there are few counterpicks) or flex picks (OG IO carry for example) might introduce complications.

#+BEGIN_SRC dot :file cbow.png :cmdline -Kdot -Tpng -Gsize=15
digraph cbow {
  "W(t-5)" [color="green"]
  "W(t-4)" [color="red"]
  "W(t-3)" [color="red"]
  "W(t-2)" [color="green"]
  "W(t-1)" [color="red"]
  "W(t)"   [color="green"]
  "W(t+1)" [color="green"]
  "W(t+2)" [color="red"]
  "W(t+3)" [color="green"]
  "W(t+4)" [color="red"]
  "W(t-5)" -> hidden
  "W(t-4)" -> hidden
  "W(t-3)" -> hidden
  "W(t-2)" -> hidden
  "W(t-1)" -> hidden
  "W(t+1)" -> hidden
  "W(t+2)" -> hidden
  "W(t+3)" -> hidden
  "W(t+4)" -> hidden
  hidden -> "W(t)"
}
#+END_SRC

#+RESULTS:
[[file:cbow.png]]

NOTE: this visualization does not incorperate bans, but could easily be modified to do so.  Not all dota games use the same ban order, but they DO all have the same pick order, so focusing on picks increases our usable data set.

*** Feature Extraction

Lame, boring, outdated; see [[*Prompt engineering][prompt engineering]]

*** Links

Relevant blog post https://gilgi.org/blog/dota-hero-embedding/

[[[#9776822][1]]]

*** Keywords

Word2Vec, CBOW (continuous bag of words), skip-gram, RNN (recurrent neural network), LSTM (long short-term memory), Transformer, [[#vaswani2017attention][Attention]]

*** Pros

Easily represents relations between heroes/items.  This is likely a useful way to represent data regardless of training method.

Easy, similar to current LLM techniques.

*** Cons

This is hard.  A hero is more than the sum of its skills.

Metrics make this a bit better, but I am frontloading all the work by coming up with metrics by hand.  It would be much better to dynamically generate/"learn" vector dimensions.

Also vector lengths seem problematic.  Lion has two disables (spike+hex) which is totally different from Pangolier who has multiple little stuns IF he hits the roll, and both of these are different from storm spirit who has a stun (vortex) on a low cooldown.  If Pangolier simply has a different stun magnitude than Lion this is insufficient because the skills are totally different AND the ability to use two different stuns vs a single multi-stunning ability is relevant.  Ideally this should be solved by having non-hardcoded vector dimensions.

+Pango Swashbuckle (multi-hit attack) combined with a Basher (stun on attack) is much more effective than a Basher on Alchemist (though still useful).  The transformation is non-linear.+

#+BEGIN_SRC text
Pangolier + Basher + Troll Warlord - Pangolier != Troll Warlord
#+END_SRC

+Heroes+item transformations cannot be accurately represented by the same vector space.+
NOTE: This is NOT an issue; vector embeddings are N-dimensional and there must exist some dimension that represents heroes and items linearly.

Some heroes may be lane counters, but not lategame counters.  This can also be fixed by increasing dimensions.

The problem with the CBOW approach is that it will ONLY predict the most commonly picked hero, not the optimal hero.

** Prompt engineering

Encode → generate prompt (few-shot?) based on hero/item encodings → GPT → profit??

https://www.deeplearning.ai/short-courses/chatgpt-prompt-engineering-for-developers/

** Non-AI

contest rate, hero counters, all data-driven

basically string-diff

* data tricks

** Negative sampling

This can be used to select 2-20[[[#9776822][1]]] heroes to use as a negative example to expand our data pool.  The smaller our data pool the more heroes we should select.


** multi-sampling games

Each game can be sampled multiple times (every ~5min) to gather data of many gamestates

- Inputs
  - radiant/dire picks/bans (24 total)
    - 2 bans each (alternating)
    - 1 radiant, 2 dire, 1 radiant pick
    - 3 bans each (alternating)
    - 1 dire, 2 radiant, 1 dire pick
    - 2 bans each (alternating)
    - 1,1 pick
  - game time
  - radiant/dire hero data
    - 5 heroes (per hero)
      - items
        - 6 items, 3 backpack, 1 tp slot, 1 neuteral item slot
      - KDA
      - track consumables bought (tango,mango,salve,blood grenade)
      - gold
      - level/XP
      - GPM/XPM (gold/XP per minute)
      - meta stats
        - disable duration
          - stun/silence/root
        - hero damage
        - tower damage
        - creep score/last hits

*** Pros

Generates lots of training data

*** Cons

This could bias long games

* API
** opendota

https://docs.opendota.com

https://api.opendota.com/api/

Can list pro players/matches

https://api.opendota.com/api/proMatches

https://api.opendota.com/api/proPlayers

Can query with custom SQL

https://api.opendota.com/api/explorer?sql=SELECT%20%2A%20FROM%20matches%20JOIN%20match_patch%20using%28match_id%29%20WHERE%20match_patch.patch%20%3D%20%277.33%27%20LIMIT%2010

** openAI

https://platform.openai.com/docs/models/overview

Create embeddings

https://platform.openai.com/docs/models/embeddings

https://openai.com/blog/new-and-improved-embedding-model

* model model

** predict draft

Inputs are hero pick/ban order.

Outputs are heroes assigned to their predicted roles.

#+BEGIN_SRC dot :file draftPredictor.png :cmdline -Kdot -Tpng -Gsize=15
digraph DraftPredictor {
  ban_1 -> hidden
  ban_2 -> hidden
  ban_3 -> hidden
  ban_4 -> hidden

  pick_5 -> hidden
  pick_6 -> hidden
  pick_7 -> hidden
  pick_8 -> hidden

  ban_9 -> hidden
  // ...
  pick_23 -> hidden
  pick_24 -> hidden

  // output layer should identify which heroes correspond to which roles
  // using hero ID is NOT acceptable here, should embed/vectorize heroes
  // hero ID 1 (abaddon) is very different from hero ID 2 (alchemist)
  hidden -> radiant_pos_1
  hidden -> dire_pos_1
  hidden -> radiant_pos_2
  hidden -> dire_pos_2
  hidden -> radiant_pos_3
  hidden -> dire_pos_3
  hidden -> radiant_pos_4
  hidden -> dire_pos_4
  hidden -> radiant_pos_5
  hidden -> dire_pos_5
}
#+END_SRC

#+RESULTS:
[[file:draftPredictor.png]]

** predict pick

Inputs are hero pick/ban order.

Outputs are percentages for each hero+position.  How good is axe pos 1 or batrider pos 2?

#+BEGIN_SRC dot :file nextPick.png :cmdline -Kdot -Tpng -Gsize=15
digraph BestNextPick {
  ban_1 -> hidden
  ban_2 -> hidden
  ban_3 -> hidden
  ban_4 -> hidden

  pick_5 -> hidden
  pick_6 -> hidden
  pick_7 -> hidden
  pick_8 -> hidden

  ban_9 -> hidden
  // ...
  pick_23 -> hidden
  pick_24 -> hidden

  // output layer should be a number from 0-1 representing how good it is as a pick
  hidden -> axe_pos_1
  hidden -> axe_pos_2
  // ...
  hidden -> batrider_pos_1
  hidden -> batrider_pos_2
  hidden -> batrider_pos_3
  hidden -> batrider_pos_4
  hidden -> batrider_pos_5
  // ...
  hidden -> windrunner_pos_3
  hidden -> windrunner_pos_4
  hidden -> windrunner_pos_5
}
#+END_SRC

#+RESULTS:
[[file:nextPick.png]]

** RNN

Input X_t is a vector representing the last picked hero

The recurrent parameter H_t is recurrent

The output Y_t is a vector that should be near the best hero choice

LLMs are only able to learn a few time steps in the past[[[#9776822][1]]] due to the multiplicative nature of the recurrent edge update.  This means that LSTMs are the preferred method.


#+BEGIN_SRC dot :file rnn.png :cmdline -Kdot -Tpng -Gsize=15
digraph rnn {
  X_t -> RNN
  RNN->RNN [label="H_t"]
  RNN->Y_t
}
#+END_SRC

#+RESULTS:
[[file:rnn.png]]

* Random links

- Papers to read
  - [ ] [[http://proceedings.mlr.press/v97/bose19a/bose19a.pdf][Compositional Fairness Constraints for Graph Embeddings]]
  - [ ] [[https://ieeexplore.ieee.org/stamp/stamp.jsp?tp=&arnumber=9517710][Mixed Dimension Embeddings with Application to Memory-Efficient Recommendation Systems]] [[https://ieeexplore.ieee.org/abstract/document/9517710][alt]]
  - [ ] [[https://arxiv.org/pdf/2202.02427.pdf][Lightweight Compositional Embeddings for Incremental Streaming Recommendation]]
  - [ ] [[https://arxiv.org/pdf/1805.07544.pdf][conditional network embeddings]]
  - [ ] [[https://iopscience.iop.org/article/10.1088/1367-2630/ab57d2/pdf][Mercator: uncovering faithful hyperbolic embeddings of complex networks]]
  - [ ] [[https://pdf.sciencedirectassets.com/271506/1-s2.0-S0957417417X00250/1-s2.0-S0957417417308333/main.pdf?X-Amz-Security-Token=IQoJb3JpZ2luX2VjEJ%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEaCXVzLWVhc3QtMSJIMEYCIQCb0DlDQoRRCkKpiCjk45fctMfPy0v691B8QlghOKzVcQIhAOjLI3q4tcheTne7C%2Ftn7YaT%2FvYgw%2BB5hnVCh3Ig6JrLKrsFCMf%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEQBRoMMDU5MDAzNTQ2ODY1IgxFKDMKRMDJkwwOvFoqjwUQ1ETJxzAarW42lSqL0K1vGxe1849IsUzOw6xDnYvho54CFIjKpZD5kWMtDbKq250HpJavsX0myE8lqoLIOgx7wDNNtIVklZ4VO275ScfUVcVv5bOED4AXNtBkpqTqA2IaSKAE0N2JUj9c7XLACuEMJt8ffu1n8iEx3jxJfomkHfjISpYtYfCg%2FQQIzbxJHnJG1IWts1XhQaBmBO1rzUW%2BDplAquCCFw3ibHM5K6P7nWIkH6n4aig8NgiUDSgIMIAIlKgPr2KhlOKnjxifqX7cUXTSP0wxUH0cfU1WBEaFYPO14plqKps%2FEOX54LxEqUo0TrZWiLugwQHR2sExmMh9ysGuYMMiWUnsJvKelnoHv3BHoC%2BeZSiPumwrKGTBOY14GwB61yTO0eaqZ%2FwmDjNFaLj2cjwWlSd4gpTrfnXH2EvdeSkOnu2%2B6cGMubTjTpfOzSBZvqjp7u0hBTnPJg3WhQhCvXDhOQPfiKeCW88WycMY7nTdmwINDhE0Yp5gLV9OJUSRXn1ZfT5hVNZcwtsGyPdVgfglIpZYABH4x4TQ%2F%2BFKbsZbzMMu91wZhGB1EAjSdOsgPs9n6f8S1H1sJWOD2D7D52Nzp4P54xqbhNeZkYQrBW5oj9inJsKH3Ozb9zYQjXVZIAwrNQ%2F7gwxL0zdCF%2FpQlYR8p2Esbotm0r0uGXQANnny6fQ6dMokgA7LYs6TiLyjvEkcF6rGhAtr3yv%2BZH2vA%2B0Bh8xA%2Bh%2F%2BOElk9Q1uWn9L0cSKXAfu5%2BvrMUZKQ4MXzp%2F80Jw8Zb73nit2jlhtCiIsLli%2BkKiLM5ImRpvaNSQ1%2FCWwkAOMLSHo%2FhetPqNCkAVVbr3IcICRoxnxuLWwmofxvN5dSlUGQFFqMJXRr6MGOrABfHgJPkF0qVV79qDNUXNQHKV8P%2F2XxvLFENnPSrisj7cBEIJizqlD6gns1%2BuEZ7metfOHgsqboJe8lAbOJsH5YnWX5Dotcre98olxDokrt6DLGYfGAFtwvLgAfZIawTbChhUBJgQbRQ5MvjIlbfJZwrjYW70DVDqDeie8bj2jJu1c2SCQYOfu%2FTIn%2FiPAHTv8pRr5g6vl1Uk5AFbnj%2BekYaztKZxqz6XboqY4izrnsnQ%3D&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Date=20230522T234458Z&X-Amz-SignedHeaders=host&X-Amz-Expires=300&X-Amz-Credential=ASIAQ3PHCVTYTOWXGH77%2F20230522%2Fus-east-1%2Fs3%2Faws4_request&X-Amz-Signature=49f6ef1d9ff0cf9d3f52248ec8ef22f1cc6031c9f750f4361c9c98eb0d396bd9&hash=bd10e725982eaac9d403df4c78c9a0c3c2746fb50a764f025a27704266952454&host=68042c943591013ac2b2430a89b270f6af2c76d8dfd086a07176afe7c76c2c61&pii=S0957417417308333&tid=spdf-2034425c-7791-4a5e-8a61-4217d5f7ccf9&sid=eb80536d747fa9414589b27012810ada0ae9gxrqa&type=client&tsoh=d3d3LnNjaWVuY2VkaXJlY3QuY29t&ua=13105803065605045502&rr=7cb8ee1db84dc6fd&cc=us][The use of machine learning algorithms in recommender systems: A systematic review]]
  - [ ] [[https://arxiv.org/pdf/2210.16489.pdf][SMPrompt: Semantic-driven Augmented Templates and Multiple Mappings for Effective Prompt Learning]]
  - [ ] https://github.com/google-research/google-research/tree/master/bertseq2seq
  - [ ] https://github.com/google-research/google-research/tree/master/sequential_attention
- Other
  - [ ] https://www.researchgate.net/publication/278678569_Games_Research_Today_Analyzing_the_Academic_Landscape_2000-2014
  - [ ] [[https://towardsdatascience.com/the-exploration-exploitation-dilemma-f5622fbe1e82][exploration-exploitation trade-off]]
  - [X] [[https://gilgi.org/blog/dota-hero-embedding/][hero embeddings]]
    - word2vec
  - https://machinelearningmastery.com/models-sequence-prediction-recurrent-neural-networks/

* Citations

** Defense of the Ancients (DOTA 2)-Draft Recommendation System
:PROPERTIES:
:TITLE:    Defense of the Ancients (DOTA 2)-Draft Recommendation System
:BTYPE:    inproceedings
:CUSTOM_ID: 9776822
:AUTHOR:   Mohammed, Yassar and Srinivasan, Samundiswary and Iyer, Siddhesh and Nagarajan, Ameyassh
:BOOKTITLE: 2022 6th International Conference on Trends in Electronics and Informatics (ICOEI)
:YEAR:     2022
:VOLUME:
:NUMBER:
:PAGES:    13-17
:DOI:      10.1109/ICOEI53556.2022.9776822
:END:

https://ieeexplore.ieee.org/abstract/document/9776822

#+BEGIN_SRC dot :file sysarch.png :cmdline -Kdot -Tpng -Gsize=15
digraph sysarch {
  "Open Dota" -> "Match Data" -> "Word2Vec/Gensim" -> "Feature Embeddings" -> "RNN/LSTM" -> "Predictions"
}
#+END_SRC

#+RESULTS:
[[file:sysarch.png]]

** The Art of Drafting: A Team-Oriented Hero Recommendation System for Multiplayer Online Battle Arena Games
:PROPERTIES:
:TITLE:    The Art of Drafting: A Team-Oriented Hero Recommendation System for Multiplayer Online Battle Arena Games
:BTYPE:    misc
:CUSTOM_ID: chen2018art
:AUTHOR:   Zhengxing Chen and Truong-Huy D Nguyen and Yuyu Xu and Chris Amato and Seth Cooper and Yizhou Sun and Magy Seif El-Nasr
:YEAR:     2018
:EPRINT:   1806.10130
:ARCHIVEPREFIX: arXiv
:PRIMARYCLASS: cs.AI
:HOWPUBLISHED: \url{https://web.cs.ucla.edu/~yzsun/papers/2018_recsys_drafting.pdf}
:END:

Non-AI-based approach

https://web.cs.ucla.edu/~yzsun/papers/2018_recsys_drafting.pdf

https://arxiv.org/abs/1806.10130

https://github.com/czxttkl/DraftArtist

** Attention Is All You Need
:PROPERTIES:
:TITLE:    Attention Is All You Need
:BTYPE:    misc
:CUSTOM_ID: vaswani2017attention
:AUTHOR:   Ashish Vaswani and Noam Shazeer and Niki Parmar and Jakob Uszkoreit and Llion Jones and Aidan N. Gomez and Lukasz Kaiser and Illia Polosukhin
:YEAR:     2017
:EPRINT:   1706.03762
:ARCHIVEPREFIX: arXiv
:PRIMARYCLASS: cs.CL
:END:

https://arxiv.org/abs/1706.03762

** {Software Framework for Topic Modelling with Large Corpora}
:PROPERTIES:
:TITLE:    {Software Framework for Topic Modelling with Large Corpora}
:BTYPE:    inproceedings
:CUSTOM_ID: rehurek_lrec
:AUTHOR:   Radim {\v R}eh{\r u}{\v r}ek and Petr Sojka
:BOOKTITLE: {Proceedings of the LREC 2010 Workshop on New Challenges for NLP Frameworks}
:PAGES:    45--50
:YEAR:     2010
:MONTH:    May
:DAY:      22
:PUBLISHER: ELRA
:ADDRESS:  Valletta, Malta
:LANGUAGE: English
:END:

https://pypi.org/project/gensim/

** {CERT}: Continual Pre-training on Sketches for Library-oriented Code Generation
:PROPERTIES:
:TITLE:    {CERT}: Continual Pre-training on Sketches for Library-oriented Code Generation
:BTYPE:    inproceedings
:CUSTOM_ID: CERT
:AUTHOR:   Zan, Daoguang and Chen, Bei and Yang, Dejian and Lin, Zeqi and Kim, Minsu and Guan, Bei and Wang, Yongji and Chen, Weizhu and Lou, Jian-Guang
:BOOKTITLE: The 2022 International Joint Conference on Artificial Intelligence
:YEAR:     2022
:END:

https://github.com/microsoft/PyCodeGPT
